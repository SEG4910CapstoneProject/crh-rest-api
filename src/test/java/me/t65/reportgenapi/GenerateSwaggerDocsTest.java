package me.t65.reportgenapi;

import me.t65.reportgenapi.db.postgres.repository.ArticleTypeRepository;
import me.t65.reportgenapi.db.postgres.repository.MonthlyArticlesRepository;

import me.t65.reportgenapi.db.postgres.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Both tests if swagger docs are available and regenerates json This ensures that when testing, the
 * api json is always regenerated by the devs
 */
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
        properties = {
                // Explicitly provide the required JWT properties to the test context
                "jwt.secret=akXxO59wTTyt6bm9J7oVutqJco5Y9p4OnhPSVYiIXq+E9T2Umv3K0E1vZnlwA9JQwVRbuz9j6mhKgO2TT5INBQ==",
                "jwt.expiration.ms=86400000"
        }
)
@EnableAutoConfiguration(exclude = DataSourceAutoConfiguration.class)
@AutoConfigureMockMvc
public class GenerateSwaggerDocsTest {
    private static final String SWAGGER_FILE = "CyberReportHub-api.json";
    @MockBean ArticleTypeRepository articleTypeRepository;
    @MockBean MonthlyArticlesRepository monthlyArticlesRepository;

    @MockBean
    UserRepository userRepository;
    @MockBean
    BCryptPasswordEncoder passwordEncoder;


    @Autowired private TestRestTemplate restTemplate;

    @Test
    public void getSwaggerDocs() throws Exception {
        String swagger = this.restTemplate.getForObject("/v3/api-docs", String.class);
        writeSwaggerFile(swagger);
    }

    private void writeSwaggerFile(String content) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(SWAGGER_FILE));
        writer.write(content);
        writer.close();
    }
}
